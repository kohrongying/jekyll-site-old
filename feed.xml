<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Rong Things</title>
    <description>I like simple things and I am a tad bit weird. Just a tad bit. 
</description>
    <link>https://kohrongying.github.io/</link>
    <atom:link href="https://kohrongying.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 18 Nov 2017 18:23:19 +0800</pubDate>
    <lastBuildDate>Sat, 18 Nov 2017 18:23:19 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Pure CSS Images</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/posts/005.JPG&quot; alt=&quot;yay&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;!!! This is like one of my more exciting projects for me. Was in school studying one day when I came across this &lt;a href=&quot;https://blog.prototypr.io/how-i-started-drawing-css-images-3fd878675c89&quot;&gt;medium article on CSS images&lt;/a&gt;. It was quite fun and I just wanted to try things out.&lt;/p&gt;

&lt;p&gt;So it involved into a side project in which I aim to add one .. every week? Haha. I’m also trying to use this chance to learn some css/js tricks.This post is also meant to tell the story of how the pictures came about.&lt;/p&gt;

&lt;h3 id=&quot;cactus&quot;&gt;Cactus&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/cactus.png&quot; alt=&quot;Cactus&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was the first image I’ve worked on post-reading of the medium article. I liked cactus (!!! I have 3 pots at home and I water them once a week - is that sufficient?!). It was quite a good exercise when starting out. Due to the many spikes and dots, I utilised mixins!&lt;/p&gt;

&lt;p&gt;And this &lt;a href=&quot;https://coolors.co/&quot;&gt;color generating tool&lt;/a&gt; and &lt;a href=&quot;http://bennettfeely.com/clippy/&quot;&gt;clippy&lt;/a&gt;!!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@mixin make-spike-tl($top, $left) {
    position: absolute;
    background-color: $dark-green;
    width: 12%;
    height: 2%;
    left: $left;
    top: $top;
}

.spikes-1 {
    @include make-spike-tl(0%,-5%);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;washing-machine&quot;&gt;Washing Machine&lt;/h3&gt;
&lt;p&gt;I actually did this in the same day of cactus. Haha, it was to rebel against school work (capstone oops if you get what I mean). First image to use CSS3 animations, have to say its pretty neat of CSS3 to have basic animations like that! No need for js!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.water-1 {
    animation: orbit 4s linear infinite;
}

@keyframes orbit {
    from { transform: rotate(0deg) translateX(110%) rotate(0deg); }
    to   { transform: rotate(360deg) translateX(110%) rotate(-360deg); }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;we-bare-bears-&quot;&gt;WE BARE BEARS !!!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/icebear.png&quot; alt=&quot;ICEBEAR&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BECAUSE THEY’RE SO CUTE?! SORRY THIS HAS TO BE IN CAPS COS I NEED TO CONVEY THIS PARTICULAR MESSAGE.&lt;/p&gt;

&lt;p&gt;That being said, the arcs were very annoying. It was pretty much a trial-and-error thing. And learning about border-radius, having a difference wih % and px and how the 50%/50% thing came about.&lt;/p&gt;

&lt;p&gt;PS. Icebear for the win.&lt;/p&gt;

&lt;h3 id=&quot;turtwig&quot;&gt;Turtwig&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/turtwig.png&quot; alt=&quot;Turtwig&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go play Mystery Dungeon! This was so hard too, because of the particular shapes and the difficulty to create sharp edges… Turned out quite weird but that’s the best I could do. Working on other Pokemon but I tell you it’s hard, it gave me several roadblocks &amp;gt;&amp;lt;&lt;/p&gt;

&lt;h3 id=&quot;astronaut&quot;&gt;Astronaut&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/astronaut.png&quot; alt=&quot;Astronaut&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LOL I took almost an entire day for this! Used HTML5 Canvas to create the background full of starss and a cool function I ripped off to create the auto-scrolling behavior. First image with javascript and I need to get used to the const and =&amp;gt; functions haha. Also started to experiment with different css selectors like &lt;code class=&quot;highlighter-rouge&quot;&gt;div:nth-child(even|odd|n-1)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;div:first-child&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;div:last-child&lt;/code&gt;. It is really convenient! Looking forward to less tedius and more ingenious CSS tricks. Also loving the linear-gradient in CSS3 and used &lt;code class=&quot;highlighter-rouge&quot;&gt;box-shadow inset&lt;/code&gt; to create the holes.&lt;/p&gt;

&lt;p&gt;And also wanted to do this astronaut, because I was inspired by 五月天 的 顽固, check out this Taiwanese BAND THEY ARE ABSOLUTELY GENIUS AND their MVs always make me cry. It’s a bid to persevere and don’t let dreams die out! It’s important to fight for yourself!&lt;/p&gt;

&lt;h3 id=&quot;upcoming-ideas&quot;&gt;Upcoming Ideas&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Incorporating Vuejs&lt;/li&gt;
  &lt;li&gt;More CSS/JS animations&lt;/li&gt;
  &lt;li&gt;More Graphic Designish things&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/11/05/css-images-discovery.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/11/05/css-images-discovery.html</guid>
        
        
      </item>
    
      <item>
        <title>Gulp, that's a tough one to swallow</title>
        <description>&lt;p&gt;So while embarking on my CSS-images project, I was motivated to use a templating engine as some parts of the HTML would be repetitive and I came across &lt;a href=&quot;https://zellwk.com/blog/nunjucks-with-gulp/&quot;&gt;this article&lt;/a&gt; and so started understanding and exploring gulp.&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;&lt;a href=&quot;https://gulpjs.com/&quot;&gt;Setting up&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node -v
npm -v
npm install gulp-cli -g
npm install gulp -D
touch gulpfile.js

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-exactly-is-gulp&quot;&gt;What exactly is gulp?&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gulp was easy to set up and surprisingly easy to understand, it wasn’t at all abstract because there were so many use cases.&lt;/p&gt;

&lt;p&gt;Some of the tasks I’ve customized:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;sass requires:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-sass&lt;/code&gt;: compiles scss to css&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-autoprefixer&lt;/code&gt;: adds prefixers like -webkit etc&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-clean-css&lt;/code&gt;: minifies css to optimize page loading times&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;nunjucks requires:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-nunjucks-render&lt;/code&gt;: template engine, nunjucks, compile templates into html&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-data&lt;/code&gt;: to allow use of json file in html&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-htmlmin&lt;/code&gt;: minifies html into one line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;new file creation requires
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt;: to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;browser sync requires:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;browser-sync&lt;/code&gt;: to reload browser upon saving&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;crop requires
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-image-resize&lt;/code&gt;: to crop images using imagick&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;watch: to watch files for changes that prompt browser sync to do its job&lt;/li&gt;
  &lt;li&gt;Lastly, set a combination of tasks under default, so that in your command prompt, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; and WATCH THE MAGIC HAPPEN. Its quite exciting.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;why-gulp&quot;&gt;Why Gulp&lt;/h3&gt;
&lt;p&gt;I find this very helpful because:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Nunjucks is a great template engine, heavily inspired by jinja2. Using gulp as a tool to automate the rendering of html is fast, easy and nosweat&lt;/li&gt;
  &lt;li&gt;Gulp is able to pipe the finalised css/html files into a customized destination which I’ve placed as &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs&lt;/code&gt; because that’s where I’m building my github page from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thing with github is that it serves only static assets (html, js, css). I recently explored express.js which is a web application framework for nodejs and I like how it was able to do routing and incorporate nunjucks BUT I just couldn’t find a way to compile the templates into html without the use of Gulp’s piping. Hence. What was my point.&lt;/p&gt;

&lt;p&gt;Yes GULP. Its great, I can’t go without it now. &lt;em&gt;large gulp in terror&lt;/em&gt;
I’VE FALLEN INTO THEIR TRAP.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/10/22/npm-gulp.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/10/22/npm-gulp.html</guid>
        
        
      </item>
    
      <item>
        <title>I need some Closure, JS</title>
        <description>&lt;p&gt;Javascript functions are not only functions, but also closures.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;MDN web docs&lt;/a&gt;, a closure is the combination of a function and the lexical environment within which the function was declared.&lt;/p&gt;

&lt;p&gt;Lexical - basically means the environment where the function can access other variable. For example, an inner function (A) nested in an outer function (B), can access local variables that are declared in B. But outer function does not have access to inner function’s variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const glob = 'This can be accessed by everyone';
const init = () =&amp;gt; {
    const name = 'Only if init is called';

    const anotherfunction = _ =&amp;gt; {
        const location = 'inside anotherfunction';
        alert(name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inner functions are the closures.&lt;/p&gt;

&lt;p&gt;Closure can access variables in 3 scopes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Variables in its own scope (const location)&lt;/li&gt;
  &lt;li&gt;Variables in its parent function scope (const name)&lt;/li&gt;
  &lt;li&gt;Variables in global namespace (const glob)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Closures’ most widely used application is in building and making functions, as well as in building private methods and variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
function makeAdder(x) {
  return function(y) {
    return x + y;
  };
}

const add5 = makeAdder(5);
const add10 = makeAdder(10);

console.log(add5(2));  // 7
console.log(add10(2)); // 12


var counter = (function() {
  var privateCounter = 0;
  function changeBy(val) {
    privateCounter += val;
  }
  return {
    increment: function() {
      changeBy(1);
    },
    decrement: function() {
      changeBy(-1);
    },
    value: function() {
      return privateCounter;
    }
  };   
})();

console.log(counter.value()); // logs 0
counter.increment();
counter.increment();
console.log(counter.value()); // logs 2
counter.decrement();
console.log(counter.value()); // logs 1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And today I found out about function declaration &lt;code class=&quot;highlighter-rouge&quot;&gt;function init()&lt;/code&gt; vs function expression &lt;code class=&quot;highlighter-rouge&quot;&gt;const init = function()&lt;/code&gt; and how function hoisting only hoists declared functions (the former) to the top, but not for function expressions.&lt;/p&gt;

&lt;p&gt;And I’m going to START USING LET AND CONST, BYEBYE VAR. And hello you sexy arrow =&amp;gt;. Meet smiley =).&lt;/p&gt;

&lt;p&gt;IIFE is termed as Immediately Invoked Function Expression.&lt;/p&gt;

&lt;p&gt;Because of &lt;a href=&quot;https://medium.com/coderbyte/a-tricky-javascript-interview-question-asked-by-google-and-amazon-48d212890703&quot;&gt;this!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is left hanging sorray.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/10/16/js-closures.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/10/16/js-closures.html</guid>
        
        
      </item>
    
      <item>
        <title>Promise me Javascript would be easy</title>
        <description>&lt;p&gt;Right, Javascript. I honestly think I’ve underestimated the power of Javascript and all its &lt;!--more--&gt;associated libraries and framework and very much overestimated myself and my knowledge of it. Over the week, I was doing Udacity courses on Javascript Design Patterns and Intro to AJAX. Which kind of opened my eyes a little.&lt;/p&gt;

&lt;p&gt;Javascript Design Patterns involved learning about the M-V-O (Model, View, Octopus - I really don’t know why Octopus) framework of organising code instead of having it spaghetti-ed. So out from there, MV(Controller), MV(ViewModel), MV* were born! Javascript frameworks like &lt;a href=&quot;http://knockoutjs.com/&quot; title=&quot;Knockmeout Documentation&quot;&gt;Knockout.js&lt;/a&gt; employes MVVM, and got a bit of a taste from &lt;a href=&quot;http://backbonejs.org/&quot; title=&quot;Backbone.js Documentation&quot;&gt;Backbone.js&lt;/a&gt; but it takes more than a Udacity course to fully get the hang of those.. :(&lt;/p&gt;

&lt;p&gt;But anyway this post is regarding JS promises! Before that, I was learning about AJAX. Besides using a Javascript library like jQuery to handle ajax requests &lt;code class=&quot;highlighter-rouge&quot;&gt;$.ajax() //islove&lt;/code&gt;, the most basic javascript command (which jQuery ajax calls fundamentally uses) is &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest() //xhr.open(), .onload() etc&lt;/code&gt;. Something new I learnt was the &lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; title=&quot;fetch Fetch, geddit?&quot;&gt;Fetch API&lt;/a&gt; which uses JS promises to handle callbacks and results!&lt;/p&gt;

&lt;p&gt;So finally, what are PROMISES?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://gph.is/1USqlsP&quot; alt=&quot;Promises aren't always real, sowee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once upon a time, in the land of JS far far away, there lived a couple, called Callback and EventListener.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myBtn = document.querySelector('.custom-btn');

myBtn.addEventListener('load', function() {
  // do something
});

myBtn.addEventListener('error', function() {
  // ok handle error
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They had a child called Async and Async gets upset when the event happened but Mom and Pop weren’t ready to listen to her. So, Uncle Promise enters and proves to be very helpful for async success/failure!&lt;/p&gt;

&lt;p&gt;(ok I tried hahahha)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yourPromise()
    .then(data =&amp;gt; { // do something when promise is fulfilled})
    .catch(err =&amp;gt; { // handle error when promise is rejected})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Promise(function(resolve[,reject]{
    var value = something();
    if (worked){
        resolve(value); //value gets passed as argument to then
    } else {
        reject();
    }
}).then(function(value){
    //success
}).catch(handleRejection);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Promises can only succeed or fail once (settle once) (cannot fail/succeed twice or switch from success to failure)&lt;/li&gt;
  &lt;li&gt;Promises that have failed / succeeded already can still have the correct callback even if the success/failure callback is added after the event has occured&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vocab&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fulfilled(Resolved): Success!&lt;/li&gt;
  &lt;li&gt;Rejected: Failure&lt;/li&gt;
  &lt;li&gt;Pending: Waiting&lt;/li&gt;
  &lt;li&gt;Settled: Either fulfilled or rejected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And how Fetch comes into the picture:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetch(url, {
    method:'GET',
    mode: 'cors',
    redirect: 'follow',
    headers: new Headers({
        'Content-Type': 'text/plain'
        })
    })
    .then(response =&amp;gt; { response.json(); }) //convert data into json object
    .then(data =&amp;gt; { console.log(data.object); })
    .catch(err =&amp;gt; { console.log(err); })

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fetch / Promises can be chained too! Am I the only one who imagines a golden retriever running back to me after a ‘fetch’? Urge to scream atta boy!&lt;/p&gt;

&lt;p&gt;So yeah, life changing? I’m not sure hahaha, just on the receiving end of new cool tech without having to suffer through the events and callbacks. But happy that I still learnt something new! Alright, that was tiring.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/promises&quot;&gt;Promise you its good liao!&lt;/a&gt; &lt;a href=&quot;https://zellwk.com/blog/js-promises/&quot;&gt;This too!&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/10/12/js-promises.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/10/12/js-promises.html</guid>
        
        
      </item>
    
      <item>
        <title>CSS Grids got me blocked up</title>
        <description>&lt;p&gt;Okay so was working on improving the UI of the flexbox sandbox page when &lt;!-- more --&gt;I was like “Hm I want to have one column that spans two rows, I wish I had grid knowledge. Oh now might be a good time to learn CSS grids!”&lt;/p&gt;

&lt;p&gt;Then I figured how ironic it would be to use CSS Grids to do the layout of a Flexbox Sandbox (LOL)&lt;/p&gt;

&lt;p&gt;Okay some simple HTML code to help set up real quick.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;
.box { 
    padding: 20px;
    background: lightblue;
}
&amp;lt;/style&amp;gt;
&amp;lt;div class=&quot;wrapper&quot;&amp;gt;
    &amp;lt;div class='box'&amp;gt;A&amp;lt;/div&amp;gt;
    &amp;lt;div class='box'&amp;gt;B&amp;lt;/div&amp;gt;
    &amp;lt;div class='box'&amp;gt;C&amp;lt;/div&amp;gt;
    &amp;lt;div class='box'&amp;gt;D&amp;lt;/div&amp;gt;
    &amp;lt;div class='box'&amp;gt;E&amp;lt;/div&amp;gt;
    &amp;lt;div class='box'&amp;gt;F&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s just the simple grid attributes you need to know for a basic understanding!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;grid-template-columns&lt;/li&gt;
  &lt;li&gt;grid-auto-rows&lt;/li&gt;
  &lt;li&gt;grid-gap&lt;/li&gt;
  &lt;li&gt;grid-column-start/end&lt;/li&gt;
  &lt;li&gt;grid-row-start/end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/003.JPG&quot; alt=&quot;CSSGrid1&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;/assets/posts/004.JPG&quot; alt=&quot;CSSGrid2&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that’s all to know for a truly basic and 5 minute understanding of CSS grid. This is probably like hovering on the surface (shall not even attempt to say scratch the surface) so I’ll see if there’s a need for a more detailed one next time! Tooodlesss.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/09/14/css-grid.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/09/14/css-grid.html</guid>
        
        
      </item>
    
      <item>
        <title>Javascript Script Tag ONCE AND FOR ALL</title>
        <description>&lt;p&gt;So I’m still a javascript noob but for two so years&lt;!-- more --&gt;, I’ve seen script tags put in the head or at the bottom of the page. If I’m lazy I write it in the html itself. What is the practice?? What difference does it make??&lt;/p&gt;

&lt;p&gt;I think I should find out. LOL.&lt;/p&gt;

&lt;p&gt;Places where I can include javascript:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Script tag in &amp;lt;head&amp;gt;&lt;/li&gt;
  &lt;li&gt;Inline with Body&lt;/li&gt;
  &lt;li&gt;Script tag at the end of the HTML file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a simle illustration done in powerpoint. I don’t even know why I did it LOL. Hope it helps future me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/001.JPG&quot; alt=&quot;Some Image&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Things I feel I should already know:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scripts are downloaded in parallel but executed sequentially&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; means to “execute this whenever”, execute this after loading the whole page or after all script have been executed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; means to wait for the parser to finish to execute this. Equiavalent to using jQuery.ready, so the code runs when everything in the DOM is available. code with defer will run after HTML is fully parsed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;integrity&lt;/code&gt; tag with a hash value, verifies that you’re loading a script from a credible third party.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/002.JPG&quot; alt=&quot;Some Image&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recommendations/Lessons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Library scripts like jQuery in head&lt;/li&gt;
  &lt;li&gt;Place normal scripts in head until it becomes a performance/page load issue&lt;/li&gt;
  &lt;li&gt;For use of canvas, put it at the end of the boy&lt;/li&gt;
  &lt;li&gt;Avoid script in the markup like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input onclick=&quot;myfunction()&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/09/13/js-script-tags-once-and-for-all.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/09/13/js-script-tags-once-and-for-all.html</guid>
        
        
      </item>
    
      <item>
        <title>New Jekyll Gems</title>
        <description>&lt;p&gt;It has been eons since I’ve touched this… Shamefully, I am back, even though I should have been back to edit this earlier haha. School after internship last year was pretty busy with &lt;!-- more --&gt; entre and ML, but this term was much more breathable.&lt;/p&gt;

&lt;p&gt;So upon coming back. Did some major changes which included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Having a proper &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Installing &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-contentblocks&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-assets&lt;/code&gt; gems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-contentblocks&lt;/code&gt; is really helpful. It is basically I don’t even know how to explain. 
In &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;default.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in your html file that uses the default layout, you can just use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is pretty neat I love it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-assets&lt;/code&gt; is an asset pipeline which is a pain in my ass. Basically after installing the gem, editing the config file, creating a _assets folder, move the _sass folder and css folder into stylesheets inside of _assets.&lt;/p&gt;

&lt;p&gt;Alot of issues came up -_- like my assets disappearing (pictures not showing, then after it is okay on my local server, it disappeared on github pages -_-). So the asset_path is useful, but the syntax was confusing cos different sources said different things really. Had to change all the css to scss to use the asset_path properly. And the github page not rendering the assets turned out to be because gh doesn’t support such dependencies?? Idk, had multiple emails of github being unable to build the page.&lt;/p&gt;

&lt;p&gt;So in the end, the easy way out is to remove the whole folder, and merely upload the _site folder which is generated while running jekyll serve on my local server. So now I have two repos:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kohrongying.github.io&lt;/code&gt; that has only the contents in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ghpagerepo&lt;/code&gt; that has all the other layouts and htmls and stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SIBEI ANNOYING. Ugh, then somehow assets keep cocking up, duno is it the config or whatever. So basically before pushing the _site to git, have to &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf .asset-cache&lt;/code&gt; in order for the assets to render correctly on gh pages.&lt;/p&gt;

&lt;p&gt;And then there was the bootstrap issue. Lol resolved it by adding it in the gemfile and importing bootstrap in each of my scss file.. But I don’t think that’s the best way…&lt;/p&gt;

&lt;p&gt;So hope to spend more time on the portfolio page! 
Landing page is sort of … 可以见人哈哈. Another day fellas!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2017/04/14/new-jekyll-gems.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2017/04/14/new-jekyll-gems.html</guid>
        
        
      </item>
    
      <item>
        <title>New Collections</title>
        <description>&lt;p&gt;So it has been long since the last posting, finally got down to managing this more often, because this is not a hectic week at all. So got around to adding more features on the testing page, &lt;!-- more --&gt; as well as creating my own colour palette (with colours from elsewhere duh), but still proud because it was coded from scratch, while there was also a lot of googling on my end on how to submit forms and how to copy to clipboard, but it was still quite a cool simple project.&lt;/p&gt;

&lt;p&gt;Today was trying to create subpages through this thing called Jekyll Collections. So now I can access like sitename/parent/child etc. Which is great!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;collections:
- expt

collections:
  expt:
    output: true
    permalink: /expt/:path/  	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Needs to be added to the config file and,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Needs to be added to the html or md of the parent page that is going to be rendered. Cool cool. Feels like its going to be a super long time till something concrete turns about but who cares. :)&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2016/07/22/new-collections.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2016/07/22/new-collections.html</guid>
        
        
      </item>
    
      <item>
        <title>Hello World</title>
        <description>&lt;p&gt;Okay. So Codeacademy led to me installing jekyll and setting up this static webpage. Only got down to trying out the things last weekend. Was really really frustrated yesterday &lt;!-- more --&gt; because I was editing the page in the _sites &amp;gt; page &amp;gt; index.html and realising that everytime I pasted code there, it’ll just disappear ugh. Then figured out it was because of the markdown. Then this morning started the whole long drawn process of understanding how to organise things here.&lt;/p&gt;

&lt;p&gt;Finally I think some light went through. 
Added bootstrap.css through a link inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;head.html&lt;/code&gt; directory. Okay most accomplished thing today. Okay but 话说回来, should have a mock up before trying to do anything right lol.&lt;/p&gt;

&lt;p&gt;But okay is it time for lunch yet?&lt;/p&gt;

&lt;p&gt;Edit: I realised I completedly missed the whole point of this post. It was supposed to note down what I’ve learnt. Okay. So basically to add a page, there are some methods but this was what I chose:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the root folder, create a folder for your page. Eg. Contact.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a file called index.html.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This is the basic layout of the index file. Notice that I didn’t add in a layout. This is because I want to customise the page to my liking.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I found it frustrating as I wanted my own css file for each page, but I didn’t want to add to the thousands of lines of code in &lt;code class=&quot;highlighter-rouge&quot;&gt;main.scss&lt;/code&gt;. So at first I tried to add a folder assets and add in each page’s css there but found that it didn’t work that well, as the link to the css had to be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;head.html&lt;/code&gt; which was in `_includes’ but I couldn’t do it..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So whatever, I just created another folder and figured it would be more convenient for each page to have its own assets.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Tab Four
permalink: /tabfour/
---
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assets/css/styles.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    your content
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;After creating it, a folder with the page name will be created in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and the index.html is the html with everything included inside.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also when writing this post, have to name the post as yyyy-mm-dd-postname and better to have no catergories bah, otherwise everything will show up under &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and me no likey.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally getting the hang of things - whereby understanding that Jekyll is a parsing engine. Once parsed, Jekyll stores the result in a self-contained static _site folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; or &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;italics&lt;/em&gt; or &lt;em&gt;italics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kohrongying.github.io&quot;&gt;textlink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pixelcog.com/blog/2013/jekyll-from-scratch-core-architecture/&quot;&gt;really helpful website&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;this-is-an-h1-tag&quot;&gt;This is an &amp;lt;h1&amp;gt; tag&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;this-is-an-h2-tag&quot;&gt;This is an &amp;lt;h2&amp;gt; tag&lt;/h2&gt;
&lt;hr /&gt;

&lt;h6 id=&quot;this-is-an-h6-tag&quot;&gt;This is an &amp;lt;h6&amp;gt; tag&lt;/h6&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 +0800</pubDate>
        <link>https://kohrongying.github.io/2016/05/30/hello-world.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2016/05/30/hello-world.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it &lt;!-- more --&gt; and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 May 2016 12:19:19 +0800</pubDate>
        <link>https://kohrongying.github.io/2016/05/19/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">https://kohrongying.github.io/2016/05/19/welcome-to-jekyll.html</guid>
        
        
      </item>
    
  </channel>
</rss>
